<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>aaa</title>
    <link href="/2021/11/08/aaa/"/>
    <url>/2021/11/08/aaa/</url>
    
    <content type="html"><![CDATA[<h2 id="aaaaaaaaaaaaaa"><a href="#aaaaaaaaaaaaaa" class="headerlink" title="aaaaaaaaaaaaaa"></a>aaaaaaaaaaaaaa</h2><p><img src="/.com//pic.jpg" alt="1111"></p><p><img src="/.com//pic.jpg" alt="2222"></p><p><img src="/.com//pic.jpg" alt="333"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建属于自己的博客(2)</title>
    <link href="/2021/11/08/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-2/"/>
    <url>/2021/11/08/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、添加主题模板"><a href="#1、添加主题模板" class="headerlink" title="1、添加主题模板"></a>1、添加主题模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.crowd.util;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultEntity</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SUCCESS = <span class="hljs-string">&quot;SUCCESS&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FAILED = <span class="hljs-string">&quot;FAILED&quot;</span>;<br>    <span class="hljs-comment">// 用来封装当前请求处理的结果是成功还是失败</span><br>    <span class="hljs-keyword">private</span> String result;<br>    <span class="hljs-comment">// 请求处理失败时返回的错误消息</span><br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-comment">// 要返回的数据</span><br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-comment">// 请求处理成功且不需要返回数据</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResultEntity</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResultEntity</span><span class="hljs-params">(String result, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.result = result;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setResult</span><span class="hljs-params">(String result)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.result = result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br>    <span class="hljs-comment">// 请求处理成功且不需要返回数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">successWithoutData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;Type&gt;(SUCCESS, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-comment">// 请求处理成功且需要返回数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">successWithData</span><span class="hljs-params">(Type data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;Type&gt;(SUCCESS, <span class="hljs-keyword">null</span>, data);<br>    &#125;<br>    <span class="hljs-comment">// 请求处理失败后使用的工具方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;Type&gt; <span class="hljs-function">ResultEntity&lt;Type&gt; <span class="hljs-title">failed</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultEntity&lt;Type&gt;(FAILED, message, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1 加载库</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> datasets, transforms,models<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> torch.utils.data.dataloader <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision.utils <span class="hljs-keyword">import</span> make_grid<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.image <span class="hljs-keyword">as</span> mpimg<br><br><span class="hljs-comment">#2 定义显示图片的方法   官方的代码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">image_show</span>(<span class="hljs-params">inp, title=<span class="hljs-literal">None</span></span>):</span><br>    plt.figure(figsize=(<span class="hljs-number">14</span>,<span class="hljs-number">3</span>))<br>    inp = inp.numpy().transpose((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>))<br>    mean = np.array([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>])<br>    std = np.array([<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>])<br>    inp = std * inp + mean<br>    inp = np.clip(inp, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    plt.imshow(inp)<br>    <span class="hljs-keyword">if</span> title <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        plt.title(title)<br>    plt.pause(<span class="hljs-number">0.001</span>)<br>    plt.show()<br>    <br><br><span class="hljs-comment">#8 更改池化层</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdaptiveConcatPool2d</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,size=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        size = size <span class="hljs-keyword">or</span> (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        self.pool_one = nn.AdaptiveAvgPool2d(size)<br>        self.pool_two = nn.AdaptiveAvgPool2d(size)<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-keyword">return</span> torch.cat([self.pool_one(x), self.pool_two], <span class="hljs-number">1</span>)  <span class="hljs-comment">#连接两个池化层</span><br>    <br>        <br><br><br><span class="hljs-comment">#7 迁移学习：拿到一个成熟的模型进行模型微调</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_model</span>():</span><br>    model_pre = models.resnet50(pretrained=<span class="hljs-literal">True</span>) <span class="hljs-comment">#获取预训练模型</span><br>    <span class="hljs-comment">#冻结预训练模型中所以的参数</span><br>    <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> model_pre.parameters():<br>        param.requires_grad = <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#微调模型 替换resnet的最后两层网络，返回一个新的模型</span><br>    model_pre.avgpool = AdaptiveConcatPool2d() <span class="hljs-comment">#池化层替换</span><br>    moedl_pre.fc = nn.Sequential(<br>        nn.Flatten(), <span class="hljs-comment">#把所有的维度拉平</span><br>        nn.BatchNorm1d(<span class="hljs-number">4096</span>),  <span class="hljs-comment">#256*6*6</span><br>        nn.Dropout(<span class="hljs-number">0.5</span>), <span class="hljs-comment">#丢掉一些神经元</span><br>        nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">512</span>),  <span class="hljs-comment">#线性层的处理</span><br>        nn.ReLU(),  <span class="hljs-comment">#激活层</span><br>        nn.BatchNorm1d(<span class="hljs-number">512</span>),  <span class="hljs-comment">#正则化处理</span><br>        nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">2</span>),<br>        nn.LogSoftmax(dim=<span class="hljs-number">1</span>)   <span class="hljs-comment">#损失函数</span><br>    )<br>    <span class="hljs-keyword">return</span> model_pre<br><br><br><span class="hljs-comment"># 9 定义训练函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>(<span class="hljs-params">model, device, train_loader, criterion, optimizer, epoch, writer</span>):</span><br>    model.train()<br>    total_lose = <span class="hljs-number">0.0</span> <span class="hljs-comment">#总损失值初始化为零</span><br>    <span class="hljs-comment"># 循环读取数据集，更新模型参数</span><br>    <span class="hljs-keyword">for</span> batch_id, (data, target) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader):<br>        data, target = data.to(device)<br>        optimizer.zero_grad()   <span class="hljs-comment">#梯度初始化为0</span><br>        output = model(data) <span class="hljs-comment">#训练后的输出</span><br>        loss = criterion(output, target) <span class="hljs-comment">#计算损失</span><br>        loss.backward()  <span class="hljs-comment">#反向传播</span><br>        optimizer.step() <span class="hljs-comment">#更新参数</span><br>        total_lose += loss <span class="hljs-comment">#累积训练损失</span><br>        <br>    writer.add_scaler(<span class="hljs-string">&quot;Train loss&quot;</span>, total_lose / <span class="hljs-built_in">len</span>(train_loader), epoch)<br>    writer.flush()   <span class="hljs-comment">#刷新</span><br>    <span class="hljs-keyword">return</span> total_lose / <span class="hljs-built_in">len</span>(train_loader)  <span class="hljs-comment">#返回平均损失值</span><br><span class="hljs-comment">#定义测试函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">model, device, test_loader, criterion, epoch, writer</span>):</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-comment">#定义损失和正确</span><br>    total_loss = <span class="hljs-number">0.0</span><br>    correct = <span class="hljs-number">0.0</span><br>    <span class="hljs-comment">#循环读取数据</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data, target <span class="hljs-keyword">in</span> test_loader:<br>            data, target = data.to(device), target.to(device)<br>            <span class="hljs-comment">#预测输出</span><br>            output  = model(data)<br>            <span class="hljs-comment">#计算损失</span><br>            total_loss += criterion(output, target).item()<br>            <span class="hljs-comment">#获取预测结果中每行数据的概率最大的下标</span><br>            preds = torch.<span class="hljs-built_in">max</span>(output, dim = <span class="hljs-number">1</span>)<br>            <span class="hljs-comment">#累计正确个数</span><br>            correct += torch.<span class="hljs-built_in">sum</span>(preds == target)<br>        <span class="hljs-comment">#平均损失</span><br>        total_loss /= <span class="hljs-built_in">len</span>(test_loader)<br>        <span class="hljs-comment">#正确率</span><br>        accuracy = correct / <span class="hljs-built_in">len</span>(test_loader)<br>        <span class="hljs-comment">#写入日志</span><br>        writer.add_scalar(<span class="hljs-string">&quot;Test Loss&quot;</span>, total_loss, epoch)<br>        writer.add_scalar(<span class="hljs-string">&quot;Accuracy&quot;</span>, accuracy, epoch)<br>        <span class="hljs-comment">#刷新</span><br>        writer.flush()<br>        <span class="hljs-comment">#输出信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test Loss: &#123;:.4f&#125;, Accuracy : &#123; :.4f&#125;&quot;</span>, <span class="hljs-built_in">format</span>(total_loss, accuracy))<br>        <span class="hljs-keyword">return</span> total_loss, accuracy<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment">#3 定义超参数（自己设置的值）</span><br>    BATCH_SIZE = <span class="hljs-number">8</span>  <span class="hljs-comment">#每批处理八个</span><br>    DEVICE = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-comment">#4 图片的转换</span><br>    data_transforms = &#123;<br>        <span class="hljs-comment">#训练集的转换</span><br>        <span class="hljs-string">&#x27;train&#x27;</span>:<br>            transforms.Compose([<br>                transforms.Resize(<span class="hljs-number">300</span>),  <br>                transforms.RandomResizedCrop(<span class="hljs-number">300</span>), <span class="hljs-comment">#随机裁剪</span><br>                transforms.RandomHorizontalFlip,   <span class="hljs-comment">#随机水平方向的变换</span><br>                transforms.CenterCrop(<span class="hljs-number">256</span>),        <span class="hljs-comment">#中心裁剪</span><br>                transforms.ToTensor(),             <span class="hljs-comment">#将图片转换为ToTensor格式</span><br>                transforms.Normalize([<span class="hljs-number">0.485</span>,<span class="hljs-number">0.456</span>,<span class="hljs-number">0.406</span>],<br>                                     [<span class="hljs-number">0.229</span>,<span class="hljs-number">0.224</span>,<span class="hljs-number">0.225</span>])   <span class="hljs-comment">#正则化，官方就这样写</span><br>            ]),<br>        <span class="hljs-comment">#验证集的转换   </span><br>        <span class="hljs-string">&#x27;val&#x27;</span>:<br>            transforms.Compose([<br>                transforms.Resize(<span class="hljs-number">300</span>),<br>                transforms.CenterCrop(<span class="hljs-number">256</span>),<br>                transforms.ToTensor(),<br>                transforms.Normalize([<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>],<br>                                     [<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>]) <br>            ])<br>    &#125;<br><br><br><br>    <span class="hljs-comment">#5 操作数据集</span><br>    <span class="hljs-comment">#5.1数据集的路径</span><br>    data_path = <span class="hljs-string">&quot;/home/lin/lhl/lin/pytorch/chest_xray&quot;</span><br><br>    <span class="hljs-comment">#5.2加载数据集</span><br>    image_datasets = &#123; x : datasets.ImageFolder(os.path.join(data_path, x),<br>                                              data_transforms[x]) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;train&#x27;</span>,<span class="hljs-string">&#x27;val&#x27;</span>]&#125;<br><br><br>    <span class="hljs-comment">#5.3为数据集创建迭代器,为了读取数据</span><br>    dataLoaders = &#123;x : DataLoader(image_datasets[x], shuffle=<span class="hljs-literal">True</span>, <br>                                  batch_size=BATCH_SIZE) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;train&#x27;</span>,<span class="hljs-string">&#x27;val&#x27;</span>]&#125;<br><br>    <span class="hljs-comment">#5.3 训练集和数据集的大小即图片的数量</span><br>    data_sizes = &#123;x : <span class="hljs-built_in">len</span>(image_datasets[x]) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;train&#x27;</span>,<span class="hljs-string">&#x27;val&#x27;</span>]&#125;<br>    <br>    <span class="hljs-comment">#5.4 获取标签的类别名称 NORMAL PNEUMONIA</span><br>    target_name = image_datasets[<span class="hljs-string">&#x27;train&#x27;</span>].classes<br>    <br>    <br>    <span class="hljs-comment">#6显示有个batch的图片</span><br>    <span class="hljs-comment">#6.1 读取图片</span><br>    datas, target = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataLoaders[<span class="hljs-string">&#x27;train&#x27;</span>]))<br>    <br>    <span class="hljs-comment">#6.2 将若干张拼成一张</span><br>    out = make_grid(datas, nrow=<span class="hljs-number">4</span>, padding=<span class="hljs-number">10</span>)<br>    <br>    <span class="hljs-comment">#6.3 显示图片</span><br>    image_show(out, title=[target_name[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target])<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atcrowdfunding<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>atcrowdfunding01-admin-parent<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>atcrowdfunding05-common-util<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>atcrowdfunding06-common-reverse<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（1）在blog-themes目录下，执行："><a href="#（1）在blog-themes目录下，执行：" class="headerlink" title="（1）在blog\themes目录下，执行："></a>（1）在blog\themes目录下，执行：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://gitee.com/mirrors/hexo-theme-fluid.git<br></code></pre></td></tr></table></figure><h4 id="（2）修改blog下的-conf-yml文件"><a href="#（2）修改blog下的-conf-yml文件" class="headerlink" title="（2）修改blog下的_conf.yml文件:"></a>（2）修改blog下的_conf.yml文件:</h4><p>​    ① 打开此文件，找到theme，替换为对应下载主题名字（就是在themes下载下来的文件夹名）【例如】<strong>theme: hexo-theme-fluid</strong></p><p>​    ② 找到language，修改为：<strong>language: zh-CN</strong> #指定语言，会影响主题显示的语言，按需修改</p><h4 id="（3）生成about页面"><a href="#（3）生成about页面" class="headerlink" title="（3）生成about页面"></a>（3）生成about页面</h4><p>​    在blog路径下，执行指令（管理员cmd操作）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，去到blog\source\about\index.md，添加layout属性，如下所示：</p><blockquote><p>-–<br>title: about<br>date: 2021-10-01 14:53:12<br>layout: about<br>-–</p></blockquote><h2 id="2、图片、内容等修改"><a href="#2、图片、内容等修改" class="headerlink" title="2、图片、内容等修改"></a>2、图片、内容等修改</h2><h4 id="（1）添加友链"><a href="#（1）添加友链" class="headerlink" title="（1）添加友链"></a>（1）添加友链</h4><p>【参考地址】：<a href="https://hexo.fluid-dev.com/docs/guide">https://hexo.fluid-dev.com/docs/guide</a></p><p>在blog\themes\hexo-theme-fluid目录下的_config.yml内容中去掉 navbar导航栏 menu下的link 前的注释，如下所示：</p><blockquote><p>menu:<br>- { key: “home”, link: “/“, icon: “iconfont icon-home-fill” }<br>- { key: “archive”, link: “/archives/“, icon: “iconfont icon-archive-fill” }<br>- { key: “category”, link: “/categories/“, icon: “iconfont icon-category-fill” }<br>- { key: “tag”, link: “/tags/“, icon: “iconfont icon-tags-fill” }<br>- { key: “about”, link: “/about/“, icon: “iconfont icon-user-fill” }<br>- { key: “links”, link: “/links/“, icon: “iconfont icon-link-fill” }</p></blockquote><h4 id="（2）更改页面标题和页面前的小icons"><a href="#（2）更改页面标题和页面前的小icons" class="headerlink" title="（2）更改页面标题和页面前的小icons"></a>（2）更改页面标题和页面前的小icons</h4><p>​    ① blog目录下的_config.yml的内容中的 <strong>title: Hexo</strong> 更改为 <strong>title: 自己自定义的名字</strong></p><p>​    ② blog\themes\hexo-theme-fluid下的_config.yml的内容中</p><blockquote><p><strong>navbar:</strong></p><p> <strong>blog_title: “Fluid”</strong></p><p>改为</p><p><strong>navbar:</strong></p><p> <strong>blog_title: “自定义”</strong></p></blockquote><p>​    ③ 同样文件，找到首页（index）</p><blockquote><p>index:<br># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同<br>banner_img: /img/default.png</p><p># 头图高度，屏幕百分比  Available: 0 - 100<br>banner_img_height: 100</p><p># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明<br>banner_mask_alpha: 0.3</p><p># 首页副标题的独立设置<br>slogan:<br>enable: true</p><p># 为空则按 hexo config.subtitle 显示, text: “An elegant Material-Design theme for Hexo”  这里的text改成你想改的</p><p>text: “自定义的内容”</p></blockquote><p>​    ④ 修改icons或者其他图片，找到blog\themes\hexo-theme-fluid\source\img目录下（注意不是blog\public\img目录下的，public的目录文件不需要改，因为每次hexo clean都会删除了，然后hexo g再重新创建）在这里面替换成你想要的图片、icon就好了。 </p><h2 id="3、-md文件博客上传"><a href="#3、-md文件博客上传" class="headerlink" title="3、.md文件博客上传"></a>3、.md文件博客上传</h2><h4 id="（1）准备"><a href="#（1）准备" class="headerlink" title="（1）准备"></a>（1）准备</h4><p>​    首先，写好一个.md文件，作为你的博客了。也可以直接在blog目录下，执行以下指令生成.md，再进行对该.md进行完善内容。【例如】<strong>hexo new “《我的第一个博客》”</strong></p><p>​    这时候就生成在blog\source_posts目录下了，你也可以报已经写好的.md，直接移动到这里，然后再重新启动hexo三件套就好了。<strong>（hexo clean、hexo g、hexo s）</strong></p><h4 id="（2）标签、分类的添加"><a href="#（2）标签、分类的添加" class="headerlink" title="（2）标签、分类的添加"></a>（2）标签、分类的添加</h4><p>​    在你想添加标签、分类的.md文件中，添加以下内容：</p><blockquote><p>-–<br>title: 《个人博客搭建》<br>date: 2021-10-01 15:35:44<br>categories: - 分类 - 子分类 - 子子分类</p><p>tags: - 标签1 - 标签2</p><p>-–</p></blockquote><h2 id="4、添加宠物插件"><a href="#4、添加宠物插件" class="headerlink" title="4、添加宠物插件"></a>4、添加宠物插件</h2><p><a href="https://www.npmjs.com/package/hexo-helper-live2d">live2d 插件</a></p><p>（1）<code>cnpm install –save hexo-helper-live2d</code> 或 <code>cnpm install –save hexo-helper-live2d</code><br>（2）安装合适的宠物 <code>cnpm install live2d-widget-model-chitose</code><br>（3）在博客_config.yml配置文件中（不是themes里的）添加即可</p><h2 id="5、提交博客到Gitee上"><a href="#5、提交博客到Gitee上" class="headerlink" title="5、提交博客到Gitee上"></a>5、提交博客到Gitee上</h2><h4 id="1-修改blog下的-config-yml配置文件的站点地址（找到deploy）："><a href="#1-修改blog下的-config-yml配置文件的站点地址（找到deploy）：" class="headerlink" title="(1)修改blog下的_config.yml配置文件的站点地址（找到deploy）："></a>(1)修改blog下的_config.yml配置文件的站点地址（找到deploy）：</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">仓库地址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br>    <span class="hljs-attr">live2d:</span> <span class="hljs-string">https://gitee.com/southern-adui/southern-adui.git</span> <span class="hljs-comment"># 宠物插件</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="（2）安装git上传助手"><a href="#（2）安装git上传助手" class="headerlink" title="（2）安装git上传助手"></a>（2）安装git上传助手</h4><p>​    <code>npm install hexo-deployer-git –save</code> 或 <code>cnpm install hexo-deployer-git –save</code> 完成后，输入 <code>hexo d</code>，即可上传到gitee指定的仓库中。</p><blockquote><p><strong>【扩展】git的操作</strong><br>    查看配置信息： $ git config –list<br>    修改用户名：git config –global user.name “xxxx(新的用户名)”<br>    修改密码：git config –global user.password “xxxx(新的密码)”<br>    修改邮箱：git config –global user.email “<a href="mailto:xxxx@xxx.com">xxxx@xxx.com</a>(新的邮箱)”<br>    清除掉缓存在git中的用户名和密码：git credential-manager uninstall</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>个人博客</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建属于自己的博客(1)</title>
    <link href="/2021/11/07/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-1/"/>
    <url>/2021/11/07/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-1/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在github上搭建自己的个人博客"><a href="#如何在github上搭建自己的个人博客" class="headerlink" title="如何在github上搭建自己的个人博客"></a>如何在github上搭建自己的个人博客</h1><blockquote><p>参考：<a href="https://www.bilibili.com/video/BV1mU4y1j72n">https://www.bilibili.com/video/BV1mU4y1j72n</a></p></blockquote><h2 id="1、首先，安装必要的工具："><a href="#1、首先，安装必要的工具：" class="headerlink" title="1、首先，安装必要的工具："></a>1、首先，安装必要的工具：</h2><h4 id="1、Node-js"><a href="#1、Node-js" class="headerlink" title="1、Node.js"></a><strong>1、Node.js</strong></h4><p>​    <strong>下载地址：</strong><a href="https://node.js.org/dist/v4.2.3/node-v4.2.3-x64.msi">Https://node.js.org/dist/v4.2.3/node-v4.2.3-x64.msi</a></p><p>​    <strong>安装教程：</strong><a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a></p><h4 id="2、Git"><a href="#2、Git" class="headerlink" title="2、Git"></a><strong>2、Git</strong></h4><p>​    <strong>下载地址：</strong><a href="https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe">https://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe</a></p><p>​    <strong>安装教程：</strong><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h2 id="2、第二，检查上面工具是否安装成功"><a href="#2、第二，检查上面工具是否安装成功" class="headerlink" title="2、第二，检查上面工具是否安装成功"></a>2、第二，检查上面工具是否安装成功</h2><p><strong>输入以下命令：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">node -v        <span class="hljs-comment"># 检验node是否安装成功</span><br>npm -v         <span class="hljs-comment"># 检验npm时候安装成功</span><br>git --version  <span class="hljs-comment"># 检验git是否安装成功</span><br></code></pre></td></tr></table></figure><p><strong>出现版本号证明安装成功</strong>：</p><p><img src="/.com//Snipaste_2021-11-07_22-15-15.jpg"></p><h2 id="3、第三，安装Hexo"><a href="#3、第三，安装Hexo" class="headerlink" title="3、第三，安装Hexo"></a>3、第三，安装Hexo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p><strong>输入 <code>hexo -v</code> 验证 Hexo 是否安装成功，出现版本号证明安装成功。</strong></p><h2 id="4、第四，注册GitHub账号"><a href="#4、第四，注册GitHub账号" class="headerlink" title="4、第四，注册GitHub账号"></a>4、第四，注册GitHub账号</h2><p><strong>参考下面文章：</strong><a href="https://www.bilibili.com/read/cv5107169/">https://www.bilibili.com/read/cv5107169/</a></p><h2 id="5、在GitHub上搭建自己的仓库"><a href="#5、在GitHub上搭建自己的仓库" class="headerlink" title="5、在GitHub上搭建自己的仓库"></a>5、在GitHub上搭建自己的仓库</h2><p><strong>注意事项：仓库名的命名格式一定要是：注册名.github.io</strong></p><p><img src="/.com//Snipaste_2021-11-07_22-27-24.jpg"></p><h2 id="6、生成SSH-Keys秘钥"><a href="#6、生成SSH-Keys秘钥" class="headerlink" title="6、生成SSH Keys秘钥"></a>6、生成SSH Keys秘钥</h2><h4 id="（1）随便进入一个文件夹，右键，点击Git-Bash-Here选项"><a href="#（1）随便进入一个文件夹，右键，点击Git-Bash-Here选项" class="headerlink" title="（1）随便进入一个文件夹，右键，点击Git Bash Here选项"></a>（1）随便进入一个文件夹，右键，点击Git Bash Here选项</h4><p><img src="/.com//Snipaste_2021-11-07_22-34-27.jpg"></p><h4 id="（2）在开启的页面中输入"><a href="#（2）在开启的页面中输入" class="headerlink" title="（2）在开启的页面中输入"></a>（2）在开启的页面中输入</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>​    *<strong>邮件地址为注册github账户时的邮箱地址，然后按四次回车，出现以下情景：</strong></p><p><img src="/.com//Snipaste_2021-11-07_22-39-14.jpg" alt="    "></p><p>​    <strong>然后会在以下路径生成两个文件，右键用记事本打开，复制里面的公钥</strong></p><p><img src="/.com//Snipaste_2021-11-07_22-41-49.jpg"></p><p>​    <strong>在GitHub上打开设置，选择SSH and GPG keys, 然后在点击 new SSH key，然后随便起个名，把刚才复制的公钥粘贴上去，然后点击添加。</strong></p><p><img src="/.com//Snipaste_2021-11-07_22-48-58.jpg"></p><h4 id="（3）检验是否添加成功-输入下面代码，出现successful后，证明添加成功。"><a href="#（3）检验是否添加成功-输入下面代码，出现successful后，证明添加成功。" class="headerlink" title="（3）检验是否添加成功,输入下面代码，出现successful后，证明添加成功。"></a>（3）检验是否添加成功,输入下面代码，出现successful后，证明添加成功。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="/.com//Snipaste_2021-11-07_22-53-18.jpg"></p><h2 id="7、在本地生成博客内容"><a href="#7、在本地生成博客内容" class="headerlink" title="7、在本地生成博客内容"></a>7、在本地生成博客内容</h2><h4 id="（1）新建一个文件夹，用来存放本地博客的内容，在此文件夹下右击打开Git-Bash-Here，分别输入以下命令："><a href="#（1）新建一个文件夹，用来存放本地博客的内容，在此文件夹下右击打开Git-Bash-Here，分别输入以下命令：" class="headerlink" title="（1）新建一个文件夹，用来存放本地博客的内容，在此文件夹下右击打开Git Bash Here，分别输入以下命令："></a>（1）新建一个文件夹，用来存放本地博客的内容，在此文件夹下右击打开Git Bash Here，分别输入以下命令：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init <span class="hljs-comment">#初始化hexo博客</span><br>hexo s <span class="hljs-comment"># 启动服务</span><br></code></pre></td></tr></table></figure><p>在输入第一条命令后，文件夹下会出现一些内容：</p><p><img src="/.com//Snipaste_2021-11-07_22-59-43.jpg"></p><p>执行第二条命令：</p><p><img src="/.com//Snipaste_2021-11-07_23-01-11.jpg"></p><p>在浏览器上输入：<a href="http://localhost:4000/">http://localhost:4000</a> 就会进入Hexo为我们生成的本地的博客。</p><p><img src="/.com//Snipaste_2021-11-07_23-04-55.jpg"></p><h2 id="8、将本地项目上传到GitHub仓库中"><a href="#8、将本地项目上传到GitHub仓库中" class="headerlink" title="8、将本地项目上传到GitHub仓库中"></a>8、将本地项目上传到GitHub仓库中</h2><h4 id="（1）修改配置文件-config-yml-的内容，在最后添加以下内容-保存，关闭。"><a href="#（1）修改配置文件-config-yml-的内容，在最后添加以下内容-保存，关闭。" class="headerlink" title="（1）修改配置文件 _config.yml 的内容，在最后添加以下内容,保存，关闭。"></a>（1）修改配置文件 _config.yml 的内容，在最后添加以下内容,保存，关闭。</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span> <br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repository:</span> <span class="hljs-string">仓库地址</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="2-执行命令，安装hexo-deployer-git自动部署发布工具："><a href="#2-执行命令，安装hexo-deployer-git自动部署发布工具：" class="headerlink" title="(2)执行命令，安装hexo-deployer-git自动部署发布工具："></a>(2)执行命令，安装hexo-deployer-git自动部署发布工具：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="（3）执行-hexo-g-命令-生成静态文件。"><a href="#（3）执行-hexo-g-命令-生成静态文件。" class="headerlink" title="（3）执行 hexo g 命令,生成静态文件。"></a>（3）执行 <code>hexo g</code> 命令,生成静态文件。</h4><h4 id="（4）执行-hexo-d-命令，上传到-GitHub-仓库中。（失败就多试几次），然后让输入注册GitHub的用户名，然后让输入令牌，我们打开GitHub，打开设置，找到Developer-Settings，点击Person-Access-Tokens，点击新建，名字随便起，下面的多选框都选上，然后点击生成令牌，复制令牌的内容，粘贴到让输入令牌的位置。这样我们就把本地的博客发布到了GitHub上。"><a href="#（4）执行-hexo-d-命令，上传到-GitHub-仓库中。（失败就多试几次），然后让输入注册GitHub的用户名，然后让输入令牌，我们打开GitHub，打开设置，找到Developer-Settings，点击Person-Access-Tokens，点击新建，名字随便起，下面的多选框都选上，然后点击生成令牌，复制令牌的内容，粘贴到让输入令牌的位置。这样我们就把本地的博客发布到了GitHub上。" class="headerlink" title="（4）执行 hexo d 命令，上传到 GitHub 仓库中。（失败就多试几次），然后让输入注册GitHub的用户名，然后让输入令牌，我们打开GitHub，打开设置，找到Developer Settings，点击Person Access Tokens，点击新建，名字随便起，下面的多选框都选上，然后点击生成令牌，复制令牌的内容，粘贴到让输入令牌的位置。这样我们就把本地的博客发布到了GitHub上。"></a>（4）执行 hexo d 命令，上传到 GitHub 仓库中。（失败就多试几次），然后让输入注册GitHub的用户名，然后让输入令牌，我们打开GitHub，打开设置，找到Developer Settings，点击Person Access Tokens，点击新建，名字随便起，下面的多选框都选上，然后点击生成令牌，复制令牌的内容，粘贴到让输入令牌的位置。这样我们就把本地的博客发布到了GitHub上。</h4><h4 id="（5）在浏览器输入-http-注册名-github-io-就可以访问部署在GitHub上的博客了。"><a href="#（5）在浏览器输入-http-注册名-github-io-就可以访问部署在GitHub上的博客了。" class="headerlink" title="（5）在浏览器输入 http://注册名.github.io 就可以访问部署在GitHub上的博客了。"></a>（5）在浏览器输入 http://注册名.github.io 就可以访问部署在GitHub上的博客了。</h4>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>个人博客</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/07/hello-world/"/>
    <url>/2021/11/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
